// Code generated by MockGen. DO NOT EDIT.
// Source: repository/employee_repository.go
//
// Generated by this command:
//
//	mockgen -source=repository/employee_repository.go -destination=repository/mocks/employee_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/aronipurwanto/go-restful-api/model/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockEmployeeRepository is a mock of EmployeeRepository interface.
type MockEmployeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeRepositoryMockRecorder
	isgomock struct{}
}

// MockEmployeeRepositoryMockRecorder is the mock recorder for MockEmployeeRepository.
type MockEmployeeRepositoryMockRecorder struct {
	mock *MockEmployeeRepository
}

// NewMockEmployeeRepository creates a new mock instance.
func NewMockEmployeeRepository(ctrl *gomock.Controller) *MockEmployeeRepository {
	mock := &MockEmployeeRepository{ctrl: ctrl}
	mock.recorder = &MockEmployeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeRepository) EXPECT() *MockEmployeeRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEmployeeRepository) Delete(ctx context.Context, employee domain.Employee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, employee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmployeeRepositoryMockRecorder) Delete(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmployeeRepository)(nil).Delete), ctx, employee)
}

// FindAll mocks base method.
func (m *MockEmployeeRepository) FindAll(ctx context.Context) ([]domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockEmployeeRepositoryMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockEmployeeRepository)(nil).FindAll), ctx)
}

// FindById mocks base method.
func (m *MockEmployeeRepository) FindById(ctx context.Context, employeeId uint64) (domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, employeeId)
	ret0, _ := ret[0].(domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockEmployeeRepositoryMockRecorder) FindById(ctx, employeeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockEmployeeRepository)(nil).FindById), ctx, employeeId)
}

// Save mocks base method.
func (m *MockEmployeeRepository) Save(ctx context.Context, employee domain.Employee) (domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, employee)
	ret0, _ := ret[0].(domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockEmployeeRepositoryMockRecorder) Save(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEmployeeRepository)(nil).Save), ctx, employee)
}

// Update mocks base method.
func (m *MockEmployeeRepository) Update(ctx context.Context, employee domain.Employee) (domain.Employee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, employee)
	ret0, _ := ret[0].(domain.Employee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEmployeeRepositoryMockRecorder) Update(ctx, employee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmployeeRepository)(nil).Update), ctx, employee)
}
